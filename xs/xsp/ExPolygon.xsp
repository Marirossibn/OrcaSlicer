%module{Slic3r::XS};

%{
#include <myinit.h>
#include "ExPolygon.hpp"
%}

%name{Slic3r::ExPolygon::XS} class ExPolygon {
    %name{_clone} ExPolygon(ExPolygon& self);
    ~ExPolygon();
    void scale(double factor);
    void translate(double x, double y);
    void _rotate(double angle, Point* center);
%{

ExPolygon*
ExPolygon::new(...)
    CODE:
        RETVAL = new ExPolygon ();
        // ST(0) is class name, ST(1) is contour and others are holes
        perl2polygon(ST(1), RETVAL->contour);
        RETVAL->holes.resize(items-2);
        for (unsigned int i = 2; i < items; i++) {
            perl2polygon(ST(i), RETVAL->holes[i-2]);
        }
    OUTPUT:
        RETVAL

SV*
ExPolygon::arrayref()
    CODE:
        AV* av = newAV();
        av_fill(av, THIS->holes.size());  // -1 +1
        av_store(av, 0, polygon2perl(THIS->contour));
        int i = 0;
        for (Polygons::iterator it = THIS->holes.begin(); it != THIS->holes.end(); ++it) {
            av_store(av, ++i, polygon2perl(*it));
        }
        RETVAL = sv_bless(newRV_noinc((SV*)av), gv_stashpv("Slic3r::ExPolygon", GV_ADD));
    OUTPUT:
        RETVAL

%}
};

%package{Slic3r::ExPolygon::XS};

%{
PROTOTYPES: DISABLE

std::string
hello_world()
  CODE:
    RETVAL = "Hello world!";
  OUTPUT:
    RETVAL
%}
