package Slic3r::Layer;
use Moo;

use Math::Clipper ':all';
use Math::ConvexHull qw(convex_hull);
use XXX;

use constant PI => 4 * atan2(1, 1);

# a sequential number of layer, starting at 0
has 'id' => (
    is          => 'ro',
    #isa         => 'Int',
    required    => 1,
);

# collection of spare segments generated by slicing the original geometry;
# these need to be merged in continuos (closed) polylines
has 'lines' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::Line]',
    default => sub { [] },
);

# collection of surfaces generated by slicing the original geometry
has 'surfaces' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::Surface]',
    default => sub { [] },
);

# collection of surfaces representing bridges
has 'bridges' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::Surface::Bridge]',
    default => sub { [] },
);

# collection of surfaces to make perimeters for
has 'perimeter_surfaces' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::Surface]',
    default => sub { [] },
);

# ordered collection of extrusion paths to build all perimeters
has 'perimeters' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::ExtrusionLoop]',
    default => sub { [] },
);

# ordered collection of extrusion paths to build skirt loops
has 'skirts' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::ExtrusionLoop]',
    default => sub { [] },
);

# collection of surfaces generated by offsetting the innermost perimeter(s)
# they represent boundaries of areas to fill
has 'fill_surfaces' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::Surface::Collection]',
    default => sub { [] },
);

# ordered collection of extrusion paths to fill surfaces
has 'fills' => (
    is      => 'rw',
    #isa     => 'ArrayRef[Slic3r::ExtrusionPath]',
    default => sub { [] },
);

sub z {
    my $self = shift;
    return $self->id * $Slic3r::layer_height / $Slic3r::resolution;
}

sub add_surface {
    my $self = shift;
    my (@vertices) = @_;
    
    # convert arrayref points to Point objects
    @vertices = map Slic3r::Point->cast($_), @vertices;
    
    my $surface = Slic3r::Surface->new(
        contour => Slic3r::Polyline::Closed->new(points => \@vertices),
    );
    push @{ $self->surfaces }, $surface;
    
    # make sure our contour has its points in counter-clockwise order
    $surface->contour->make_counter_clockwise;
    
    return $surface;
}

sub add_line {
    my $self = shift;
    my ($line) = @_;
    
    $line = Slic3r::Line->cast($line);
    
    push @{ $self->lines }, $line;
    return $line;
}

sub remove_line {
    my $self = shift;
    my ($line) = @_;
    @{ $self->lines } = grep $_ ne $line, @{ $self->lines };
}

sub remove_surface {
    my $self = shift;
    my ($surface) = @_;
    @{ $self->surfaces } = grep $_ ne $surface, @{ $self->surfaces };
}

# build polylines of lines which do not already belong to a surface
# okay, this code is a mess.  will need some refactoring.  sorry.
sub make_polylines {
    my $self = shift;
    
    # remove line duplicates
    if (0) {
        # this removes any couple of coinciding Slic3r::Line::FacetEdge
        my %lines_map = ();
        foreach my $line (grep $_->isa('Slic3r::Line::FacetEdge'), @{ $self->lines }) {
            my $ordered_id = $line->ordered_id;
            if (exists $lines_map{$ordered_id}) {
                delete $lines_map{$ordered_id};
                next;
            }
            $lines_map{$ordered_id} = $line;
        }
        
        @{ $self->lines } = (values(%lines_map), grep !$_->isa('Slic3r::Line::FacetEdge'), @{ $self->lines });
    }
    if (1) {
        # this removes any duplicate, leaving one
        my %lines_map = map { join(',', sort map $_->id, @{$_->points} ) => "$_" } @{ $self->lines };
        %lines_map = reverse %lines_map;
        @{ $self->lines } = grep $lines_map{"$_"}, @{ $self->lines };
    }
    
    # now remove lines that are already part of a surface
    if (1) {
        my @lines = @{ $self->lines };
        @{ $self->lines } = ();
        LINE: foreach my $line (@lines) {
            if (!$line->isa('Slic3r::Line::FacetEdge')) {
                push @{ $self->lines }, $line;
                next LINE;
            }
            foreach my $surface (@{$self->surfaces}) {
                if ($surface->surface_type eq $line->edge_type && $surface->contour->has_segment($line)) {
                    next LINE;
                }
            }
            push @{ $self->lines }, $line;
        }
    }
    
    # make a cache of line endpoints
    my (%pointmap) = ();
    foreach my $line (@{ $self->lines }) {
        for my $point (@{ $line->points }) {
            $pointmap{$point->id} ||= [];
            push @{ $pointmap{$point->id} }, $line;
        }
    }
    foreach my $point_id (keys %pointmap) {
        $pointmap{$point_id} = [
            sort { $a->isa('Slic3r::Line::FacetEdge') <=> $b->isa('Slic3r::Line::FacetEdge') } 
                @{$pointmap{$point_id}} ];
    }
    
    if (0) {
        # defensive programming
        for (keys %pointmap) {
            next if @{$pointmap{$_}} == 2;
            
            use Slic3r::SVG;
            Slic3r::SVG::output(undef, "lines_and_points.svg",
                lines       => [ map $_->p, grep !$_->isa('Slic3r::Line::FacetEdge'), @{$self->lines} ],
                red_lines   => [ map $_->p, grep $_->isa('Slic3r::Line::FacetEdge'), @{$self->lines} ],
                points      => [ map [split /,/], keys %pointmap ],
                red_points  => [ [split /,/, $_ ] ],
            );
            
            YYY $pointmap{$_};
            
            die sprintf "No point should be endpoint of less or more than 2 lines ($_ => %d)!", scalar(@{$pointmap{$_}});
        }
        
        while (my @single_line_points = grep @{$pointmap{$_}} == 1, keys %pointmap) {
            for my $point_id (@single_line_points) {
                foreach my $lines (values %pointmap) {
                    next unless $pointmap{$point_id}->[0];
                    @$lines = grep $_ ne $pointmap{$point_id}->[0], @$lines;
                }
                delete $pointmap{$point_id};
            }
        }
    }
    
    # make a subroutine to remove lines from pointmap
    my $remove_line = sub {
        my $line = shift;
        foreach my $lines ($pointmap{$line->a->id}, $pointmap{$line->b->id}) {
            @$lines = grep $_ ne $line, @$lines;
        }
    };
    
    my $polylines = [];
    
    # loop while we have spare lines
    while (my ($first_line) = map @$_, values %pointmap) {
        # add first line to a new polyline
        my $points = [ $first_line->a, $first_line->b ];
        $remove_line->($first_line);
        my $last_point = $first_line->b;
        
        # loop through connected lines until we return to the first point
        while (my $next_line = $pointmap{$last_point->id}->[0]) {
            
            # get next point
            ($last_point) = grep $_->id ne $last_point->id, @{$next_line->points};
            
            # add point to polyline
            push @$points, $last_point;
            $remove_line->($next_line);
        }
        
        # remove last point as it coincides with first one
        pop @$points;
        
        if (@$points == 1 && $first_line->isa('Slic3r::Line::FacetEdge')) {
            Slic3r::debugf "Skipping spare facet edge";
            next;
        }
        
        die sprintf "Invalid polyline with only %d points\n", scalar(@$points) if @$points < 3;
        
        Slic3r::debugf "Discovered polyline of %d points (%s)\n", scalar @$points,
            join ' - ', map $_->id, @$points;
        push @$polylines, Slic3r::Polyline::Closed->new(points => $points);
        
        # actually this is not needed, as Math::Clipper used in make_surfaces() also cleans contours
        $polylines->[-1]->merge_continuous_lines;
        #$polylines->[-1]->cleanup;  # not proven to be actually useful
    }
    
    return $polylines;
}

sub make_surfaces {
    my $self = shift;
    my ($polylines) = @_;
    
    #use Slic3r::SVG;
    #Slic3r::SVG::output_polygons($main::print, "polylines.svg", [ map $_->p, @$polylines ]);
    
    # count how many other polylines enclose each polyline
    # even = contour; odd = hole
    my %enclosing_polylines = ();
    my %enclosing_polylines_count = ();
    my $max_depth = 0;
    foreach my $polyline (@$polylines) {
        # a polyline encloses another one if any point of it is enclosed
        # in the other
        my $point = $polyline->points->[0];
        my $ordered_id = $polyline->id;
        
        # find polylines contaning $point, and thus $polyline
        $enclosing_polylines{$polyline} = 
            [ grep $_->id ne $ordered_id && $_->encloses_point($point), @$polylines ];
        $enclosing_polylines_count{$polyline} = scalar @{ $enclosing_polylines{$polyline} };
        
        $max_depth = $enclosing_polylines_count{$polyline}
            if $enclosing_polylines_count{$polyline} > $max_depth;
    }
    
    # make a cache for contours and surfaces
    my %surfaces = ();   # contour => surface
    
    # start looking at most inner polylines
    for (; $max_depth > -1; $max_depth--) {
        foreach my $polyline (@$polylines) {
            next unless $enclosing_polylines_count{$polyline} == $max_depth;
            
            my $surface;
            if ($enclosing_polylines_count{$polyline} % 2 == 0) {
                # this is a contour
                $polyline->make_counter_clockwise;
                $surface = Slic3r::Surface->new(contour => $polyline);
            } else {
                # this is a hole
                $polyline->make_clockwise;
                
                # find the enclosing polyline having immediately close depth
                my ($contour) = grep $enclosing_polylines_count{$_} == ($max_depth-1), 
                    @{ $enclosing_polylines{$polyline} };
                
                if ($surfaces{$contour}) {
                    $surface = $surfaces{$contour};
                    $surface->add_hole($polyline);
                } else {
                    $surface = Slic3r::Surface->new(
                        contour => $contour,
                        holes   => [$polyline],
                    );
                    $surfaces{$contour} = $surface;
                }
            }
            
            # check whether we already have this surface
            next if grep $_->id eq $surface->id, @{ $self->surfaces };
            
            $surface->surface_type('internal');
            push @{ $self->surfaces }, $surface;
            
            Slic3r::debugf "New surface: %s (%d holes: %s)\n", 
                $surface->id, scalar @{$surface->holes},
                join(', ', map $_->id, @{$surface->holes}) || 'none'
                if $Slic3r::debug;
        }
    }
}

sub merge_contiguous_surfaces {
    my $self = shift;
    
    if ($Slic3r::debug) {
        Slic3r::debugf "Initial surfaces (%d):\n", scalar @{ $self->surfaces };
        Slic3r::debugf "  [%s] %s (%s with %d holes)\n", $_->surface_type, $_->id, 
            ($_->contour->is_counter_clockwise ? 'ccw' : 'cw'), scalar @{$_->holes} for @{ $self->surfaces };
        #Slic3r::SVG::output_polygons($main::print, "polygons-before.svg", [ map $_->contour->p, @{$self->surfaces} ]);
    }
    
    my %resulting_surfaces = ();
    
    # only merge surfaces with same type
    foreach my $type (qw(bottom top internal)) {
        my $clipper = Math::Clipper->new;
        my @surfaces = grep $_->surface_type eq $type, @{$self->surfaces}
            or next;
        
        #Slic3r::SVG::output_polygons($main::print, "polygons-$type-before.svg", [ map $_->contour->p, @surfaces ]);
        $clipper->add_subject_polygons([ map $_->contour->p, @surfaces ]);
        
        my $result = $clipper->ex_execute(CT_UNION, PFT_NONZERO, PFT_NONZERO);
        $clipper->clear;
        
        my @extra_holes = map @{$_->{holes}}, @$result;
        $result = [ map $_->{outer}, @$result ];
        #Slic3r::SVG::output_polygons($main::print, "polygons-$type-union.svg", $result);
        
        # subtract bottom or top surfaces from internal
        if ($type eq 'internal') {
            $clipper->add_subject_polygons($result);
            $clipper->add_clip_polygons([ map $_->{outer}, @{$resulting_surfaces{$_}} ])
                for qw(bottom top);
            $result = $clipper->execute(CT_DIFFERENCE, PFT_NONZERO, PFT_NONZERO);
            $clipper->clear;
        }
        
        # apply holes
        $clipper->add_subject_polygons($result);
        $result = $clipper->execute(CT_DIFFERENCE, PFT_NONZERO, PFT_NONZERO);
        $clipper->clear;
        
        $clipper->add_subject_polygons($result);
        $clipper->add_clip_polygons([ @extra_holes ]) if @extra_holes;
        $clipper->add_clip_polygons([ map $_->p, map @{$_->holes}, @surfaces ]);
        my $result2 = $clipper->ex_execute(CT_DIFFERENCE, PFT_NONZERO, PFT_NONZERO);
        
        $resulting_surfaces{$type} = $result2;
    }
    
    # remove overlapping surfaces
    # (remove anything that is not internal from areas covered by internal surfaces)
    # this may happen because of rounding of Z coordinates: the model could have
    # features smaller than our layer height, so we'd get more things on a single
    # layer
    if (0) {  # not proven to be necessary until now
        my $clipper = Math::Clipper->new;
        foreach my $type (qw(bottom top)) {
            $clipper->clear;
            $clipper->add_subject_polygons([ map { $_->{outer}, @{$_->{holes}} } @{$resulting_surfaces{$type}} ]);
            $clipper->add_clip_polygons([ map { $_->{outer}, @{$_->{holes}} } @{$resulting_surfaces{internal}} ]);
            $resulting_surfaces{$type} = $clipper->ex_execute(CT_DIFFERENCE, PFT_NONZERO, PFT_NONZERO);
        }
    }
    
    # save surfaces
    @{ $self->surfaces } = ();
    foreach my $type (keys %resulting_surfaces) {
        foreach my $p (@{ $resulting_surfaces{$type} }) {
            push @{ $self->surfaces }, Slic3r::Surface->new(
                surface_type => $type,
                contour => Slic3r::Polyline::Closed->cast($p->{outer}),
                holes   => [
                    map Slic3r::Polyline::Closed->cast($_), @{$p->{holes}}
                ],
            );
        }
    }
    
    if ($Slic3r::debug) {
        Slic3r::debugf "Final surfaces (%d):\n", scalar @{ $self->surfaces };
        Slic3r::debugf "  [%s] %s (%s with %d holes)\n", $_->surface_type, $_->id, 
            ($_->contour->is_counter_clockwise ? 'ccw' : 'cw'), scalar @{$_->holes} for @{ $self->surfaces };
    }
}

sub remove_small_surfaces {
    my $self = shift;
    my @good_surfaces = ();
    
    foreach my $surface (@{$self->surfaces}) {
        next if !$surface->contour->is_printable;
        @{$surface->holes} = grep $_->is_printable, @{$surface->holes};
        push @good_surfaces, $surface;
    }
    
    @{$self->surfaces} = @good_surfaces;
}

sub remove_small_perimeters {
    my $self = shift;
    my @good_perimeters = grep $_->is_printable, @{$self->perimeters};
    Slic3r::debugf "removed %d unprintable perimeters\n", (@{$self->perimeters} - @good_perimeters) 
        if @good_perimeters != @{$self->perimeters};
    
    @{$self->perimeters} = @good_perimeters;
}

# make bridges printable
sub process_bridges {
    my $self = shift;
    return if $self->id == 0;
    
    # a bottom surface on a layer > 0 is either a bridge or a overhang 
    # or a combination of both
    
    my @bottom_surfaces     = grep $_->surface_type eq 'bottom',   @{$self->surfaces} or return;
    my @supporting_surfaces = grep $_->surface_type =~ /internal/, @{$self->surfaces};
    
    SURFACE: foreach my $surface (@bottom_surfaces) {
        # since we can't print concave bridges, we transform the surface
        # in a convex polygon; this will print thin membranes eventually
        my $surface_p = convex_hull($surface->contour->p);
        
        # find all supported edges (as polylines, thus keeping notion of 
        # consecutive supported edges)
        my @supported_polylines = ();
        {
            my @current_polyline = ();
            EDGE: foreach my $edge (Slic3r::Geometry::polygon_lines($surface_p)) {
                for (@supporting_surfaces) {
                    local $Slic3r::Geometry::epsilon = 1E+7;
                    if (Slic3r::Geometry::polygon_has_subsegment($_->contour->p, $edge)) {
                        push @current_polyline, $edge;
                        next EDGE;
                    }
                }
                if (@current_polyline) {
                    push @supported_polylines, [@current_polyline];
                    @current_polyline = ();
                }
            }
            push @supported_polylines, [@current_polyline] if @current_polyline;
        }
        
        # defensive programming, this shouldn't happen
        if (@supported_polylines == 0) {
            Slic3r::debugf "Found bridge/overhang with no supports on layer %d; ignoring\n", $self->id;
            next SURFACE;
        }
        
        if (@supported_polylines == 1) {
            Slic3r::debugf "Found bridge/overhang with only one support on layer %d; ignoring\n", $self->id;
            next SURFACE;
        }
        
        # now connect the first point to the last of each polyline
        @supported_polylines = map [ $_->[0]->[0], $_->[-1]->[-1] ], @supported_polylines;
        
        # if we got more than two supports, get the longest two
        if (@supported_polylines > 2) {
            my %lengths = map { "$_" => Slic3r::Geometry::line_length($_) }, @supported_polylines;
            @supported_polylines = sort { $lengths{"$a"} <=> $lengths{"$b"} } @supported_polylines;
            @supported_polylines = @supported_polylines[0,1];
        }
        
        # connect the midpoints, that will give the the optimal infill direction
        my @midpoints = map Slic3r::Geometry::midpoint($_), @supported_polylines;
        my $bridge_angle = -Slic3r::Geometry::rad2deg(Slic3r::Geometry::line_atan(\@midpoints) + PI/2);
        Slic3r::debugf "Optimal infill angle of bridge on layer %d is %d degrees\n", $self->id, $bridge_angle;
        
        # detect which neighbor surfaces are now supporting our bridge
        my @supporting_neighbor_surfaces = ();
        foreach my $supporting_surface (@supporting_surfaces) {
            local $Slic3r::Geometry::epsilon = 1E+7;
            push @supporting_neighbor_surfaces, $supporting_surface 
                if grep Slic3r::Geometry::polygon_has_vertex($supporting_surface->contour->p, $_), 
                    map $_->[0], @supported_polylines;
        }
        
        # defensive programming, this shouldn't happen
        if (@supporting_neighbor_surfaces == 0) {
            Slic3r::debugf "Couldn't find supporting surfaces on layer %d; ignoring\n", $self->id;
            next SURFACE;
        }
        
        # now, extend our bridge by taking a portion of supporting surfaces
        {
            # offset the bridge by 5mm
            my $bridge_offset = ${ offset([$surface_p], 5 / $Slic3r::resolution, $Slic3r::resolution * 100, JT_MITER, 2) }[0];
            
            # calculate the new bridge
            my $clipper = Math::Clipper->new;
            $clipper->add_subject_polygon($surface_p);
            $clipper->add_subject_polygons([ map $_->p, @supporting_neighbor_surfaces ]);
            $clipper->add_clip_polygon($bridge_offset);
            my $intersection = $clipper->execute(CT_INTERSECTION, PFT_NONZERO, PFT_NONZERO);
            
            push @{$self->bridges}, map Slic3r::Surface::Bridge->cast_from_polygon($_,
                surface_type => 'bottom',
                bridge_angle => $bridge_angle,
            ), @$intersection;
        }
    }
}

# generates a set of surfaces that will be used to make perimeters
# thus, we need to merge internal surfaces and bridges
sub detect_perimeter_surfaces {
    my $self = shift;
    
    # little optimization: skip the Clipper UNION if we have no bridges
    if (!@{$self->bridges}) {
        push @{$self->perimeter_surfaces}, @{$self->surfaces};
    } else {
        my $clipper = Math::Clipper->new;
        $clipper->add_subject_polygons([ map $_->p, grep $_->surface_type =~ /internal/, @{$self->surfaces} ]);
        $clipper->add_clip_polygons([ map $_->p, @{$self->bridges} ]);
        my $union = $clipper->ex_execute(CT_UNION, PFT_NONZERO, PFT_NONZERO);
        
        push @{$self->perimeter_surfaces}, 
            map Slic3r::Surface->cast_from_expolygon($_, surface_type => 'internal'), 
            @$union;
        
        push @{$self->perimeter_surfaces}, 
            grep $_->surface_type !~ /internal/ && ($_->surface_type ne 'bottom' || $self->id == 0), 
            @{$self->surfaces};
    }
}

# splits fill_surfaces in internal and bridge surfaces
sub split_bridges_fills {
    my $self = shift;
    
    my $clipper = Math::Clipper->new;
    foreach my $surf_coll (@{$self->fill_surfaces}) {
        my @surfaces = @{$surf_coll->surfaces};
        @{$surf_coll->surfaces} = ();
        
        # intersect fill_surfaces with bridges to get actual bridges
        foreach my $bridge (@{$self->bridges}) {
            $clipper->clear;
            $clipper->add_subject_polygons([ map $_->p, @surfaces ]);
            $clipper->add_clip_polygon($bridge->contour->p);
            my $intersection = $clipper->ex_execute(CT_INTERSECTION, PFT_NONZERO, PFT_NONZERO);
            push @{$surf_coll->surfaces}, map Slic3r::Surface::Bridge->cast_from_expolygon($_,
                surface_type => 'bottom',
                bridge_angle => $bridge->bridge_angle,
            ), @$intersection;
        }
        
        # difference between fill_surfaces and bridges are the other surfaces
        foreach my $surface (@surfaces) {
            $clipper->clear;
            $clipper->add_subject_polygons([ $surface->p ]);
            $clipper->add_clip_polygons([ map $_->contour->p, @{$self->bridges} ]);
            my $difference = $clipper->ex_execute(CT_DIFFERENCE, PFT_NONZERO, PFT_NONZERO);
            push @{$surf_coll->surfaces}, map Slic3r::Surface->cast_from_expolygon($_,
                surface_type => $surface->surface_type), @$difference;
        }
    }
}

1;
